"""
Locate best networks from a generator of networks

storebest(...) 

Parameters, all optional: 
 - count - number of best networks to be stored

Computing cost, variables can also be set via command line:
 - runnaiveleqrt=TRESHOLD - run ODT-naive cost computation, when the number of reticulations is `<= THRESHOLD`; otherwise run DP
 - usenaive - 1 - use always naive algorithm 
 - verbosehccost - printing stats during search
 - stopinit - stop when there is no improvement after cost computation for NUM initial networks ; default=0 (off)
 - stopatcost=NUM - stop when the cost is <= NUM (if defined)

Requires: gene trees.

Best networks globally are saved to log/odt files.

"""

# Define some gene trees 
genetrees="(a,(b,(c,d)));(a,b)"

# Prepare networks (10x10) with 2 reticulations
netr = addreticulations(source=quasiconsensustrees(count=10), reticulations=2, samplespernet=10)	

res = storebest(source=netr, count=5, maximprovements=10)

println(res)
println("----------------------------")

# infinite number of networks with 2 reticulations; do not try to print :)
netr = addreticulations(source=quasiconsensustrees(count=-1), reticulations=2, samplespernet=10)    

# find bests
res = storebest(source=netr, count=5, stopinit=100, stopatcost=0)





